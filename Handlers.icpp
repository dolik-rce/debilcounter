#include "DebilCounter.h"

inline SqlVal If(const SqlBool& b, const SqlVal& trueval, const SqlVal& falseval) {
	return Case(b, trueval)(falseval);
	//return SqlFunc("if", SqlSet(SqlVal(~b, SqlS::HIGH), trueval, falseval));
}

inline SqlVal CountIf(const SqlVal& val, const SqlBool& b){
	//SqlBool cond = (b && SqlBool(b(SqlS::COMP) + " is not NULL", SqlS::COMP));
	return SqlFunc("sum", If(b, val, 0));
}

SKYLARK(HomePage, "") {
	RLOG(http.GetPeerAddr());
	ValueMap vm;
	ValueMap conf;
	if(http[".logged"]) {
		SQLR * Select(MSG,MSG2,FCOLUMN,FCOLUMN2,BGCOLOR,BGCOLOR2,FGCOLOR,FGCOLOR2)
		       .From(USER)
		       .Where(ID == http[".user"]);
		SQLR.Fetch(conf);
	} else {
		conf.Add("FCOLUMN", "Debil");
		conf.Add("FCOLUMN2", "Borec");
		conf.Add("FGCOLOR", "white");
		conf.Add("FGCOLOR2", "white");
		conf.Add("BGCOLOR", "red");
		conf.Add("BGCOLOR2", "green");
	}
	if (!IsNull(http[".ping"])) {
		http("PING", true);
		http("PING_TIMESTAMP", GetUTCSeconds(http[".ping"]));
		http("PING_EVENT", http[".ping_event"]);
		http.SessionSet(".ping", Null);
		http.SessionSet(".ping_event", Null);
	}
	http("CONF", conf);
	http.RenderResult("DebilCounter/index.witz");
}

inline String EncryptPassword(const String& password, const String& salt) {
	return salt + MD5String(salt + password);
}

SKYLARK(Login, "login:POST") {
	RLOG(http.GetPeerAddr());
	String hashed;
	String login = http["login"];
	String password = http["password"];
	if (login.IsEmpty()) {
		http.Redirect("/?error=nologin");
		return;
	}
	if (password.IsEmpty()) {
		http.Redirect("/?error=nopass");
		return;
	}
	SQLR * Select(PWD).From(USER).Where(ID == login);
	if (SQLR.Fetch(hashed)) {
		if (hashed != EncryptPassword(password, hashed.Left(4))) {
			http.Redirect("/?error=auth");
			return;
		}
	} else {
		String salt;
		salt.Cat()
		<< char(Random(74)+'0')
		<< char(Random(74)+'0')
		<< char(Random(74)+'0')
		<< char(Random(74)+'0');
		SQL * Insert(USER)(PWD, EncryptPassword(password, salt))(ID, login);
	}
	http.SessionSet("logged", true);
	http.SessionSet("user", login);
	http.Redirect(HomePage);
}

SKYLARK(Logout, "logout") {
	RLOG(http.GetPeerAddr());
	http.SessionSet("logged", false);
	http.Redirect(HomePage);
}

SKYLARK(Count, "count/*") {
	RLOG(http.GetPeerAddr());
	String event = http[0];
	if (http[".logged"] && (event == "B" || event == "D")) {
		Time time = GetSysTime();
		SQL * Insert(DATA)(DAY, time)(EDITED, time)(USER_ID, http[".user"])(EVENT, event);
		http.SessionSet(".ping", time);
		http.SessionSet(".ping_event", event);
	}
	http.Redirect(HomePage);
}

SKYLARK(Description, "description:POST") {
	RLOG(http.GetPeerAddr());
	if (http[".logged"]) {
		SQL * Update(DATA)(DESC, http["desc"])(EDITED, GetSysTime())
		      .Where(USER_ID == http[".user"] && DAY == TimeFromUTC(http.Int("date")));
	}
	http.Redirect(HomePage);
}

SKYLARK(Settings, "settings") {
	RLOG(http.GetPeerAddr());
	if (http[".logged"]) {
		SQL * Update(USER)
		            (FGCOLOR, http["fgcolor"])
		            (BGCOLOR, http["bgcolor"])
		            (FCOLUMN, http["fcolumn"])
		            (MSG, http["msg"])
		            (FGCOLOR2, http["fgcolor2"])
		            (BGCOLOR2, http["bgcolor2"])
		            (FCOLUMN2, http["fcolumn2"])
		            (MSG2, http["msg2"])
		      .Where(ID == http[".user"]);
	}
	http.Redirect(HomePage);
}

SKYLARK(Tables, "data:POST") {
	RLOG(http.GetPeerAddr());
	Date today=GetSysDate();
	SQLR * Select(ID, EVENT_ID.As("EVENT"), SqlMax(DAY).As("LAST"),
	    CountIf(1, NotNull(DAY)).As("TOTAL"),
	    CountIf(1, SqlFunc("date", DAY) >= today-30).As("MONTH"),
	    CountIf(1, SqlFunc("date", DAY) >= today-7).As("WEEK"),
	    CountIf(1, SqlFunc("date", DAY) == today-1).As("YESTERDAY"),
	    CountIf(1, SqlFunc("date", DAY) == today).As("TODAY"))
	.From(USER)
	.InnerJoin(EVENTS)
	.LeftJoin(DATA).On(ID == USER_ID && EVENT_ID == EVENT)
	.GroupBy(ID, EVENT)
	.OrderBy(Descending(SqlId("LAST")), Lower(ID));
	ValueArray data1;
	ValueArray data2;
	ValueMap vm;
	while (SQLR.Fetch(vm)){
		vm.Set("LAST", ScanTime("ymd", AsString(vm["LAST"])));
		vm.Set("TIMESTAMP", GetUTCSeconds(vm["LAST"]));
		if (vm["EVENT"] == "D") {
			data1.Add(vm);
		}
		if (vm["EVENT"] == "B") {
			data2.Add(vm);
		}
	}
	http("EVENT", "D")("CONFNAME","FCOLUMN")("DATA", data1);
	http.UxRender("section_D", "DebilCounter/table.witz");
	http("EVENT", "B")("CONFNAME","FCOLUMN2")("DATA", data2);
	http.UxRender("section_B", "DebilCounter/table.witz");
	http.UxRun("conf.loaded += 1;");
	http.UxRun("tablesLoaded();");
}

SKYLARK(History, "history/*:POST") {
	RLOG(http.GetPeerAddr());
	ValueMap vm;
	Value history;
	SQLR * Select(USER_ID, EVENT, DAY, DESC)
	.From(DATA)
	.OrderBy(Descending(DAY))
	.Limit(http.Int(0));
	while (SQLR.Fetch(vm)) {
		vm.Set("TIMESTAMP", GetUTCSeconds(vm["DAY"]));
		history.Add(vm);
	}
	http("HISTORY", history);
	http.UxRender("history", "DebilCounter/history.witz");
	http.UxRun("conf.loaded += 1;");
}

SKYLARK(MonthlyAward, "monthly:POST") {
	RLOG(http.GetPeerAddr());
	ValueMap vm;
	ValueArray data1, data2;
	Date thismonth = FirstDayOfMonth(GetUtcTime());

	SqlSet subselect1 = Select(
	    USER_ID,
	    EVENT,
	    Count(SqlAll()).As("CNT"),
	    SqlFunc("strftime", SqlSet("%m", DAY)).As("MONTH"),
	    SqlFunc("strftime", SqlSet("%Y", DAY)).As("YEAR"))
	.From(DATA)
	.GroupBy(SqlSet(USER_ID, EVENT, SqlId("MONTH"), SqlId("YEAR")))
	.OrderBy(Lower(USER_ID))
	.AsTable("SUB1");

	SqlSet subselect2 = Select(
	    SqlFunc("group_concat", USER_ID).As("USER_ID"),
	    EVENT,
	    SqlId("CNT"),
	    SqlId("MONTH"),
	    SqlId("YEAR"))
	.From(subselect1)
	.GroupBy(SqlSet(EVENT, SqlId("CNT"), SqlId("MONTH"), SqlId("YEAR")))
	.AsTable("SUB2");

	SQLR * Select(USER_ID, EVENT, SqlMax(SqlId("CNT")).As("CNT"), SqlId("MONTH"), SqlId("YEAR"))
	.From(subselect2)
	.GroupBy(EVENT, SqlId("MONTH"), SqlId("YEAR"))
	.OrderBy(SqlId("YEAR"), SqlId("MONTH"), EVENT);

	while (SQLR.Fetch(vm)) {
		if (StrInt(AsString(vm["YEAR"])) == thismonth.year && StrInt(AsString(vm["MONTH"])) == thismonth.month)
			vm.Add("CURRENT", true);
		if (vm["EVENT"] == "D") {
			data1.Add(vm);
		}
		if (vm["EVENT"] == "B") {
			data2.Add(vm);
		}
	}
	http("EVENT", "D")("CONFNAME","FCOLUMN")("DATA", data1);
	http.UxRender("monthly_D", "DebilCounter/monthly.witz");
	http("EVENT", "B")("CONFNAME","FCOLUMN2")("DATA", data2);
	http.UxRender("monthly_B", "DebilCounter/monthly.witz");
	http.UxRun("conf.loaded += 1;");
}

SKYLARK(Changed, "changed/*:POST") {
	RLOG(http.GetPeerAddr());
	Time since(http.Int(0));
	SQLR * Select(SqlMax(DAY))
	       .From(DATA)
	       .Where(EDITED>since);
	Time t(0);
	SQLR.Fetch(t);
	if (!IsNull(t))
		http.UxRun("reload("+IntStr(t.AsFileTime())+");");
}

SKYLARK(Feed, "feed/*:POST_RAW") {
	RLOG(http.GetPeerAddr());
	Time since(http.Int(0));
	ValueMap vm;
	ValueArray history;

	SQLR * Select(USER_ID, EVENT, DAY, DESC, (DAY!=EDITED && EDITED>since).As("UPDATED"))
	.From(DATA)
	.Where(EDITED > since)
	.OrderBy(Descending(DAY))
	.Limit(20);

	while (SQLR.Fetch(vm)) {
		vm.Set("TIMESTAMP", GetUTCSeconds(vm["DAY"]));
		history.Add(vm);
	}

	http("HISTORY", history)
	    ("LAST", (int64)GetSysTime().AsFileTime())
	    ("CB", Nvl(http["cb"],"debilcounter"));
	RawHtmlText resp = http.Render("DebilCounter/feed.witz").To<RawHtmlText>();
	http.UxRun(resp.text);
}

SKYLARK(Favicon, "favicon.ico") {
	http.Content("image/png", LoadDataFile("favicon.png"));
}

SKYLARK(CatchAll, "**") {
	http.Redirect(HomePage);
}
